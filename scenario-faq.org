* 시나리오 - 간단한 FAQ 챗봇

#+BEGIN_QUOTE
이 문서는 BotHub.Studio 블로그에 게제된 튜토리얼을, 저자의 허락 하에 워크샵에 맞춰 업데이트한 것입니다.
#+END_QUOTE

카카오톡을 이용하다 보면 간단한 FAQ를 안내해주는 플러스 친구를 만나볼 수 있습니다. 어떤 플러스 친구는 1:1 대화를 지원하기도 하고, 어떤 것은 소식만 전해주기도 합니다. 여기서는 간단한 FAQ 챗봇을 만들어봅시다.

Microsoft는 최근에 챗봇에 관련한 다양한 제품들을 내놓고 있습니다. 그 중 [[https://qnamaker.ai][QnA Maker]]는 아직 Preview 제품이지만 원하는 기능을 테스트해보기엔 충분해 보입니다.

#+BEGIN_QUOTE
QnA Maker는 현재 무료 preview 버전이기 때문에 분당 최대 10 트랜젝션, 월별로 최대 1만 트랜젝션까지만 사용할 수 있습니다.
#+END_QUOTE

** 환경 준비

본 튜토리얼에서는 [[https://bothub.studio][BotHub.Studio]] 플랫폼을 사용할 것이기에, [[file:preparations.org][환경 준비하기]]를 참고하여 계정 생성 및 명령행 도구(CLI tool)를 준비하고, 새 프로젝트를 생성하여 메신저와 연결을 완료합니다.

#+BEGIN_SRC sh
mkdir qnabot
cd qnabot
bothub init
#+END_SRC


** QnA Maker 둘러보기

[[https://qnamaker.ai][QnA Maker]]는 API를 통해 Q&A를 처리할 수 있는 기능을 제공합니다. 아래 구성을 참고하세요.

[[https://raw.githubusercontent.com/Microsoft/azure-docs/master/articles/cognitive-services/QnAMaker/Images/botFrameworkArch.png]]

직접 문서를 업로드하거나, 이미 게시된 웹 문서의 URL을 사용해서 질문과 답변 내용을 등록할 수 있습니다. 이 데이터에 대해 인덱스가 생성되고 답변의 랭크가 계산됩니다. 이것을 활용해서 사용자의 질문에 가장 적절한 답변을 제공하게 됩니다.

Microsoft는 자체 Bot Framework를 가지고 있지만, 다른 챗봇 플랫폼에서도 API를 통해서 쉽게 사용할 수 있습니다. 여기서는 [[https://bothub.studio][BotHub.Studio]]와 연동하겠습니다.

Microsoft 계정을 가지고 있어야 서비스를 사용할 수 있습니다. 로그인 후 우상단의 사용자 이름을 클릭하여 나오는 사용자 메뉴에서 구독 키(subscription key)를 확인할 수 있습니다.

[[https://cdn-images-1.medium.com/max/800/1*RTRDO-jWlDtiVqb3yOuOQQ.png]]

BotHub 프로젝트의 프로젝트 저장소에 QnA Maker의 구독 키(subscription key)를 추가합니다.

#+BEGIN_SRC sh
bothub properties set subscription_key your_key
#+END_SRC

상단의 ~Create new service~ 메뉴 항목을 클릭하여 새 서비스를 만들어봅시다.

[[file:images/qna-maker-create-service.png]]

이름만 입력하고 나머지 항목들은 비어있는 채로 서비스를 생성할 수 있습니다. 생성된 서비스 안에 들어가보면, 웹브라우저의 URL 창에서 kbid, 즉 Knowledge Base의 ID를 확인할 수 있습니다. BotHub 프로젝트의 프로젝트 저장소에 이 kbid를 추가합니다.

#+BEGIN_SRC sh
bothub properties set kbid your_kb_id
#+END_SRC

왼쪽 메뉴의 Settings 메뉴로 들어가면, URL이나 파일을 입력하여 Q&A 내용을 입력할 수 있습니다. 예시를 위해서 카카오 사이트의 [[http://cs.kakao.com/helps][FAQ URL]]을 입력해 보았습니다.

[[https://cdn-images-1.medium.com/max/800/1*hq78M80Nz1Tta6ZLqJ7qPA.png]]

Knowledge Base에 FAQ 내용이 자동으로 입력된 것을 확인할 수 있습니다. URL 외에도 엑셀 등으로 정리된 파일을 불러오는 것도 가능합니다.

Q&A 내용을 모두 입력한 후에는 꼭 ~Save and retain~ 후 ~Publish~ 를 해야 반영됩니다.


** QnA API 연동

~bot.py~ 에 아래 내용을 입력합니다.

#+BEGIN_SRC python :exports both :results output
  # -*- coding: utf-8 -*-

  import json

  from urllib.request import Request
  from urllib.request import urlopen
  from urllib.error import HTTPError

  class Qnamaker(object):
      base_url = 'https://westus.api.cognitive.microsoft.com/qnamaker/v2.0'

      def __init__(self, kbid, secret):
          self.kbid = kbid
          self.headers = {
              'Ocp-Apim-Subscription-Key': '{}'.format(secret),
              'Content-Type': 'application/json; charset=utf-8'
          }

      def answer(self, question):
          req = Request(url='{}/knowledgebases/{}/generateAnswer'.format(self.base_url, self.kbid),
                        headers=self.headers)
          data = json.dumps({"question": question})
          try:
              response = urlopen(req, data=data.encode('utf-8'))
              data = json.loads(response.read().decode('utf-8'))
              answer = data.get('answers')[0]['answer']
              return answer
          except HTTPError as e:
              return '<{}: {}>'.format(e.code, e.msg)
#+END_SRC

질문에 대한 답변에는 정확도 점수가 포함되어 있습니다. 여기서는 가장 정확도가 높은 하나의 답변만을 반환하도록 해놓았습니다.


** 챗봇 연결하기

챗봇의 큰 흐름은 다음과 같습니다:

 - 사용자는 챗봇에 문의 내용을 입력함
 - QnA Maker API를 사용해서, 등록된 질문 중 정확도가 높은 답변을 가져옴
 - 답변을 사용자에게 제공

아래는 사용자의 문의 내용을 QnA Maker에 API를 통해 요청하고 답변을 받아 사용자에게 전달하는 코드입니다.

~bot.py~ 에 아래 코드를 추가합니다.

#+BEGIN_SRC python :exports both :results output
  # -*- coding: utf-8 -*-

  from bothub_client.bot import BaseBot

  class Bot(BaseBot):
      def on_default(self, event, context):
          message = event.get('content')

          kbid = self.get_project_data().get('kbid')
          key = self.get_project_data().get('subscription_key')
          qnamaker = Qnamaker(kbid, key)
          answer = qnamaker.answer(message)
          self.send_message(answer)
#+END_SRC
