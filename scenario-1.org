* 시나리오 1 - 영화 상영관 찾기

이런 상황 있지 않나요? 친구와 만나서 놀다가, 갑자기 '영화나 보러 가자!'. 그런데 무슨 영화를 하지? 근처에 상영관은 어디가 있지?

이리저리 검색해보고 앱들을 열어보지만, 너무 많은 기능들을 제공해서 그런지 딱 내가 원하는 정보를 얻으려면 시간이 많이 걸립니다.

 1. 요즘 볼만한 영화는 어떤 것들이 있는지
 2. 현재 있는 곳에서 갈 수 있는 근처 상영관들은 어디가 있는지
 3. 각 상영관에서 어떤 영화들을 상영하는지

알려주는 챗봇을 만들어봅시다. MovieFriendBot이라고 할까요?


** 설계

*** 대화 흐름

먼저, 대화의 흐름이 어떻게 진행될지 계획을 짜봅시다.

안내

#+BEGIN_SRC dot :file images/secenario-1-flow-greeting.png :exports result
digraph G {
rankdir=LR
node [shape=box]
"인사하기" -> "목적 안내하기" -> "사용법 알려주기" -> "행동 요청하기"
}
#+END_SRC

[[file:images/secenario-1-flow-greeting.png]]


볼만한 영화 찾기

#+BEGIN_SRC dot :file outputs/secenario-1-flow-box-office.png :exports result
digraph G {
rankdir=LR
node [shape=box]
"유저 명령" -> "영화 목록 반환"
}
#+END_SRC

[[file:outputs/secenario-1-flow-box-office.png]]

근처 상영관 찾기

#+BEGIN_SRC dot :file outputs/secenario-1-flow.png :exports result
digraph G {
rankdir=LR
node [shape=box]
"유저 명령" -> "위치 데이터 수집" -> "상영관 목록 반환" -> "상영관 선택" -> "상영시간표 반환"
}
#+END_SRC

[[file:outputs/secenario-1-flow.png]]


*** 대본

이번에는 구체적인 대본을 생각해볼까요?

안내

 1. MovieFriendBot: 반가워요, MovieFriendBot입니다.
 2. MovieFriendBot: 요즘 볼만한 영화들을 알려드리고, 현재 계신 곳에서 가까운 영화관들의 상영시간표를 알려드려요.
 3. MovieFriendBot: '영화순위'나 '근처 상영관 찾기'를 실행해보세요.


볼만한 영화 찾기

 1. User: 영화순위
 2. MovieFriendBot: 요즘 볼만한 영화들의 순위는 이렇습니다. 1. 미이라, 2. 악녀, 3. 원더우먼, 4. 노무현입니다, 5. 캐리비안의 해적: 죽은 자는 말이 없다, 6. 대립군, 7. 심야식당 2, 8. 겟 아웃, 9. 하루, 10. 엘르
 3. MovieFriendBot: 다음으로 무엇을 하시겠어요?
 4. MovieFriendBot: /[영화순위 다시보기]/ /[근처 상영관 찾기]/


근처 상영관 찾기

 1. User: /{근처 상영관 찾기}/
 2. MovieFriendBot: 현재 계신 위치를 알려주세요.
 3. MovieFriendBot: /[현재 위치 보내기]/
 4. MovieFriendBot: 현재 계신 곳에서 가장 가까운 상영관 세 곳은 신도림, 광명, 오목교입니다.
 5. MovieFriendBot: 상영 시간표를 보시겠습니까?
 6. MovieFriendBot: /[신도림 상영시간표]/ /[광명 상영시간표]/ /[오목교 상영시간표]/ /[도움말]/
 7. User: /{신도림 상영시간표}/
 8. MovieFriendBot: 신도림에서는 아래와 같이 영화를 상영합니다.
 9. MovieFriendBot: 미이라 17:30 (130/150) 20:00 (1/50)
 10. MovieFriendBot: 원더우먼 12:00 (40/45) 13:00 (33/80)


** Data snippets

이제 실제 데이터를 다뤄봅시다.

*** 박스 오피스 순위

우선, '볼만한 영화'를 어떻게 가져오면 좋을까요? 구글에서 '영화 API'로 검색하면 그 중에 [[http://www.kobis.or.kr/kobisopenapi/homepg/apiservice/searchServiceInfo.do][영화진흥위원회]] 에서 제공하는 일별 박스오피스 정보가 있습니다.

아래와 같이 REST API를 사용하여 영화 박스 오피스 순위를 가져올 수 있습니다. 아까 생성한 챗봇 프로젝트 안에 =bothub/movies.py= 라는 파일을 만들고 아래 클래스를 작성해봅시다.

#+BEGIN_SRC python :results output :exports both :var api_key="430156241533f1d058c603178cc3ca0e"
import json
import math
from urllib.request import urlopen
from urllib.parse import urlencode
from datetime import datetime
from datetime import timedelta

class BoxOffice(object):
    base_url = 'http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/'\
               'searchDailyBoxOfficeList.json'
    def __init__(self, api_key):
        self.api_key = api_key

    def get_movies(self):
        target_dt = datetime.now() - timedelta(days=1)
        target_dt_str = target_dt.strftime('%Y%m%d')
        query_url = '{}?key={}&targetDt={}'.format(self.base_url, self.api_key, target_dt_str)
        with urlopen(query_url) as fin:
            return json.loads(fin.read().decode('utf-8'))

    def simplify(self, result):
        return [
           {
              'rank': entry.get('rank'),
              'name': entry.get('movieNm'),
              'code': entry.get('movieCd')
           }
           for entry in result.get('boxOfficeResult').get('dailyBoxOfficeList')
        ]

box = BoxOffice(api_key)
movies = box.get_movies()
print(box.simplify(movies))
#+END_SRC

#+RESULTS:
: [{'code': '20166384', 'rank': '1', 'name': '하루'}, {'code': '20166488', 'rank': '2', 'name': '미이라'}, {'code': '20162343', 'rank': '3', 'name': '악녀'}, {'code': '20168261', 'rank': '4', 'name': '원더 우먼'}, {'code': '20174602', 'rank': '5', 'name': '노무현입니다'}, {'code': '20170982', 'rank': '6', 'name': '캐리비안의 해적: 죽은 자는 말이 없다'}, {'code': '20175423', 'rank': '7', 'name': '나의 붉은고래'}, {'code': '20175662', 'rank': '8', 'name': '엘르'}, {'code': '20175142', 'rank': '9', 'name': '극장판 쿠로코의 농구 라스트 게임'}, {'code': '20169348', 'rank': '10', 'name': '대립군'}]


*** 상영관 정보

이번에는 상영관 정보를 가져와봅시다. 상영관 정보는 사용하기 편리하게 공개되어 있는 API가 딱히 없습니다. 롯데시네마의 웹사이트를 분석하여 아래와 같은 방법으로 정보를 가져올 수 있습니다. 역시 아까 =BoxOffice= 와 마찬가지로 =bothub/movies.py= 에 작성해봅시다.

#+BEGIN_SRC python :results output :exports both
import json
import math
from datetime import datetime
from urllib.request import urlopen
from urllib.parse import urlencode


class LotteCinema(object):
    base_url = 'http://www.lottecinema.co.kr'
    base_url_cinema_data = '{}/LCWS/Cinema/CinemaData.aspx'.format(base_url)
    base_url_movie_list = '{}/LCWS/Ticketing/TicketingData.aspx'.format(base_url)

    def make_payload(self, **kwargs):
        param_list = {'channelType': 'MW', 'osType': '', 'osVersion': '', **kwargs}
        data = {'ParamList': json.dumps(param_list)}
        payload = urlencode(data).encode('utf8')
        return payload

    def byte_to_json(self, fp):
        content = fp.read().decode('utf8')
        return json.loads(content)

    def get_theater_list(self):
        url = self.base_url_cinema_data
        payload = self.make_payload(MethodName='GetCinemaItems')
        with urlopen(url, data=payload) as fin:
            json_content = self.byte_to_json(fin)
            return [
                {
                    'TheaterName': '{} 롯데시네마'.format(entry.get('CinemaNameKR')),
                    'TheaterID': '{}|{}|{}'.format(entry.get('DivisionCode'), entry.get('SortSequence'), entry.get('CinemaID')),
                    'Longitude': entry.get('Longitude'),
                    'Latitude': entry.get('Latitude')
                }
                for entry in json_content.get('Cinemas').get('Items')
            ]

    def distance(self, x1, x2, y1, y2):
        dx = float(x1) - float(x2)
        dy = float(y1) - float(y2)
        distance = math.sqrt(dx**2 + dy**2)
        return distance

    def filter_nearest_theater(self, theater_list, pos_latitude, pos_longitude, n=3):
        distance_to_theater = []
        for theater in theater_list:
            distance = self.distance(pos_latitude, theater.get('Latitude'), pos_longitude, theater.get('Longitude'))
            distance_to_theater.append((distance, theater))

        return [theater for distance, theater in sorted(distance_to_theater, key=lambda x: x[0])[:n]]

    def get_movie_list(self, theater_id):
        url = self.base_url_movie_list
        target_dt = datetime.now()
        target_dt_str = target_dt.strftime('%Y-%m-%d')
        payload = self.make_payload(MethodName='GetPlaySequence', playDate=target_dt_str, cinemaID=theater_id, representationMovieCode='')
        with urlopen(url, data=payload) as fin:
            json_content = self.byte_to_json(fin)
            movie_id_to_info = {}

            for entry in json_content.get('PlaySeqsHeader', {}).get('Items', []):
                movie_id_to_info.setdefault(entry.get('MovieCode'), {})['Name'] = entry.get('MovieNameKR')
                
            for order, entry in enumerate(json_content.get('PlaySeqs').get('Items')):
                schedules = movie_id_to_info[entry.get('MovieCode')].setdefault('Schedules', [])
                schedule = {
                    'StartTime': '{}'.format(entry.get('StartTime')),
                    'RemainingSeat': int(entry.get('TotalSeatCount')) - int(entry.get('BookingSeatCount'))
                }
                schedules.append(schedule)
            return movie_id_to_info

cinema = LotteCinema()
            
print(cinema.filter_nearest_theater(cinema.get_theater_list(), 37.5, 126.844))
print(cinema.get_movie_list('1|2|1018'))
#+END_SRC

#+RESULTS:
: [{'TheaterName': '광명(광명사거리) 롯데시네마', 'TheaterID': '1|3|3027', 'Longitude': '126.8556578', 'Latitude': '37.4794548'}, {'TheaterName': '신도림 롯데시네마', 'TheaterID': '1|14|1015', 'Longitude': '126.8889387', 'Latitude': '37.5086097'}, {'TheaterName': '신도림 롯데시네마', 'TheaterID': '2|18|1015', 'Longitude': '126.8889387', 'Latitude': '37.5086097'}]
: {'11449': {'Name': '원더 우먼', 'Schedules': [{'RemainingSeat': 3, 'StartTime': '18:50'}]}, '11378': {'Name': '캐리비안의 해적: 죽은 자는 말이 없다', 'Schedules': [{'RemainingSeat': 0, 'StartTime': '23:35'}]}, '11481': {'Name': '노무현입니다', 'Schedules': [{'RemainingSeat': 5, 'StartTime': '21:20'}, {'RemainingSeat': 4, 'StartTime': '16:35'}]}, '11498': {'Name': '하루', 'Schedules': [{'RemainingSeat': 2, 'StartTime': '16:05'}, {'RemainingSeat': 4, 'StartTime': '18:00'}, {'RemainingSeat': 8, 'StartTime': '19:55'}, {'RemainingSeat': 0, 'StartTime': '21:50'}, {'RemainingSeat': 0, 'StartTime': '23:50'}]}, '11488': {'Name': '악녀', 'Schedules': [{'RemainingSeat': 2, 'StartTime': '21:35'}, {'RemainingSeat': 2, 'StartTime': '18:50'}, {'RemainingSeat': 4, 'StartTime': '17:25'}, {'RemainingSeat': 3, 'StartTime': '19:55'}, {'RemainingSeat': 0, 'StartTime': '22:25'}]}, '11452': {'Name': '나의 붉은고래', 'Schedules': [{'RemainingSeat': 0, 'StartTime': '24:05'}, {'RemainingSeat': 2, 'StartTime': '16:40'}]}, '11374': {'Name': '미이라', 'Schedules': [{'RemainingSeat': 2, 'StartTime': '16:15'}, {'RemainingSeat': 1, 'StartTime': '18:30'}, {'RemainingSeat': 2, 'StartTime': '20:45'}, {'RemainingSeat': 0, 'StartTime': '23:00'}, {'RemainingSeat': 9, 'StartTime': '15:00'}, {'RemainingSeat': 2, 'StartTime': '17:15'}, {'RemainingSeat': 2, 'StartTime': '19:30'}, {'RemainingSeat': 0, 'StartTime': '21:50'}, {'RemainingSeat': 0, 'StartTime': '24:10'}]}}

주의할 점이 있는데, 해외 컴퓨터 및 클라우드 서버에서는 롯데시네마에 접속하지 못하도록 차단되어 있습니다. 그런데 현재 대부분 챗봇 빌더 등의 솔루션이 클라우드 서버 및 해외 서버에서 운영되고 있기 때문에 곧바로 저 코드를 사용하기에는 문제가 있습니다. 이번 실습에서는 국내에 relay server를 두고 그곳을 통해서 정보를 가져오는 방법으로 문제를 우회하려 합니다. 그래서 위 코드에서 base url 부분을 'www.lottecinema.co.kr' 대신, 실습현장에서 알려줄 주소로 변경해야 합니다.


** 챗봇 구현

이제 위의 코드를 실제 챗봇과 연결해봅시다.

우선 아까 준비단계에서 생성해놓았던 챗봇 프로젝트 root 디렉토리에서 아래 명령으로 영진위 Open API key를 입력해줍니다.

#+BEGIN_SRC sh
bothub property set box_office_api_key <api_key>
#+END_SRC

*** 영화 순위

=bothub/bot.py= 파일에서 =Bot= class의 =handle_message= 메소드를 아래와 같이 채워봅시다.

#+BEGIN_SRC python
from bothub_client.messages import Message
from .movies import BoxOffice

class Bot(BaseBot):
    def handle_message(self, event, context):
        message = event.get('content')

        if message == '영화순위':
            self.send_box_office(event)

    def send_box_office(self, event):
        data = self.get_project_data()
        api_key = data.get('box_office_api_key')
        box_office = BoxOffice(api_key)
        movies = box_office.simplify(box_office.get_movies())
        rank_message = ', '.join(['{}. {}'.format(m['rank'], m['name']) for m in movies])
        response = '요즘 볼만한 영화들의 순위입니다\n{}'.format(rank_message)

        message = Message(event).set_text(response)\
                                .add_quick_reply('영화순위')\
                                .add_quick_reply('근처 상영관 찾기')
        self.send_message(message)
#+END_SRC

쉘에서 아래 명령으로 테스트해봅시다.

#+BEGIN_SRC sh
bothub test
#+END_SRC

#+BEGIN_EXAMPLE
BotHub> 영화순위
요즘 볼만한 영화들의 순위입니다
1. 하루, 2. 미이라, 3. 악녀, 4. 원더 우먼, 5. 노무현입니다, 6. 캐리비안의 해적: 죽은 자는 말이 없다, 7. 나의 붉은고래, 8. 엘르, 9. 극장판 쿠로코의 농구 라스트 게임, 10. 대립군
#+END_EXAMPLE

잘 동작하면 서버에 배포해서 메신저를 통해서도 동작시켜봅시다.

#+BEGIN_SRC sh
bothub deploy
#+END_SRC


*** 주위 상영관 검색

이번에는 주위 상영관을 검색하는 부분을 작성해봅시다.

#+BEGIN_SRC python
from bothub_client.messages import Message
from .movies import BoxOffice
from .movies import LotteCinema

class Bot(BaseBot):
    def handle_message(self, event, context):
        message = event.get('content')

        if message == '영화순위':
            self.send_box_office(event)
        elif message == '근처 상영관 찾기':
            self.send_search_theater_message(event)

    def send_search_theater_message(self, event):
        message = Message(event).set_text('현재 계신 위치를 알려주세요')\
                                .add_location_request('위치 전송하기')
        self.send_message(message)
#+END_SRC

(아까 작성했던 박스오피스 출력에 필요한 코드들은 위 코드에서는 생략해두었습니다. 위 코드에 없어졌다고 지우지 말고 계속 추가해주세요.)

쉘에서 테스트해봅시다.

#+BEGIN_SRC sh
bothub test
#+END_SRC

#+BEGIN_EXAMPLE
BotHub> 근처 상영관 찾기
현재 계신 위치를 알려주세요
#+END_EXAMPLE

다음으로는 위치를 전송받고 상영관들의 정보를 안내해줍시다.

#+BEGIN_SRC python
from bothub_client.messages import Message
from .movies import BoxOffice
from .movies import LotteCinema

class Bot(BaseBot):
    def handle_message(self, event, context):
        message = event.get('content')
        location = event.get('location')

        if location:
            self.send_nearest_theaters(location['latitude'], location['longitude'])
            return

        if message == '영화순위':
            self.send_box_office(event)
        elif message == '근처 상영관 찾기':
            self.send_search_theater_message(event)

    def send_nearest_theaters(self, latitude, longitude, event):
        c = LotteCinema()
        theaters = c.get_theater_list()
        nearest_theaters = c.filter_nearest_theater(theaters, latitude, longitude)

        message = Message(event).set_text('가장 가까운 상영관들입니다.\n' + \
                                          '상영 시간표를 확인하세요:')

        for theater in nearest_theaters:
            data = '/schedule {} {}'.format(theater['TheaterID'], theater['TheaterName'])
            message.add_postback_button(theater['TheaterName'], data)

        message.add_quick_reply('영화순위')
        self.send_message(message)
#+END_SRC


*** 상영시간표 안내

이제는 상영관을 선택하면 상영시간표를 안내해줍시다.

#+BEGIN_SRC python
from bothub_client.messages import Message
from .movies import BoxOffice
from .movies import LotteCinema

class Bot(BaseBot):
    def handle_message(self, event, context):
        message = event.get('content')
        location = event.get('location')

        if location:
            self.send_nearest_theaters(location['latitude'], location['longitude'])
            return

        if message == '영화순위':
            self.send_box_office(event)
        elif message == '근처 상영관 찾기':
            self.send_search_theater_message(event)
        elif message.startswith('/schedule'):
            _, theater_id, theater_name = message.split(maxsplit=2)
            self.send_theater_schedule(theater_id, theater_name, event)

    def send_theater_schedule(self, theater_id, theater_name, event):
        c = LotteCinema()
        movie_id_to_info = c.get_movie_list(theater_id)

        text = '{}의 상영시간표입니다.\n\n'.format(theater_name)

        movie_schedules = []
        for info in movie_id_to_info.values():
            movie_schedules.append('* {}\n  {}'.format(info['Name'], ' '.join([schedule['StartTime'] for schedule in info['Schedules']])))

        message = Message(event).set_text(text + '\n'.join(movie_schedules))\
                                .add_quick_reply('영화순위')\
                                .add_quick_reply('근처 상영관 찾기')
        self.send_message(message)
#+END_SRC

동작을 확인해봅시다.

핵심적인 기능은 구현되었습니다. 이제 사용자에게 좀더 친절하게 접근하기 위한 장치들을 추가해봅시다.

먼저 환영 메세지를 깜빡 잊었습니다. 추가해봅시다.


#+BEGIN_SRC python
from bothub_client.messages import Message
from .movies import BoxOffice
from .movies import LotteCinema

class Bot(BaseBot):
    def handle_message(self, event, context):
        message = event.get('content')
        location = event.get('location')

        if location:
            self.send_nearest_theaters(location['latitude'], location['longitude'])
            return

        if message == '영화순위':
            self.send_box_office(event)
        elif message == '근처 상영관 찾기':
            self.send_search_theater_message(event)
        elif message.startswith('/schedule'):
            _, theater_id, theater_name = message.split(maxsplit=2)
            self.send_theater_schedule(theater_id, theater_name, event)
        elif message == '/start':
            self.send_welcome_message(event)

    def send_welcome_message(self, event):
        message = Message(event).set_text('반가워요.\n\n'\
                                          '저는 요즘 볼만한 영화들을 알려드리고, '\
                                          '현재 계신 곳에서 가까운 영화관들의 상영시간표를 알려드려요.\n\n'
                                          "'영화순위'나 '근처 상영관 찾기'를 입력해보세요.")\
                                .add_quick_reply('영화순위')\
                                .add_quick_reply('근처 상영관 찾기')
        self.send_message(message)
#+END_SRC

이번에는 오류 메세지를 추가해봅시다.

#+BEGIN_SRC python
from bothub_client.messages import Message
from .movies import BoxOffice
from .movies import LotteCinema

class Bot(BaseBot):
    def handle_message(self, event, context):
        message = event.get('content')
        location = event.get('location')

        if location:
            self.send_nearest_theaters(location['latitude'], location['longitude'])
            return

        if message == '영화순위':
            self.send_box_office(event)
        elif message == '근처 상영관 찾기':
            self.send_search_theater_message(event)
        elif message.startswith('/schedule'):
            _, theater_id, theater_name = message.split(maxsplit=2)
            self.send_theater_schedule(theater_id, theater_name, event)
        elif message == '/start':
            self.send_welcome_message(event)
        else:
            self.send_error_message(event)

    def send_error_message(self, event):
        message = Message(event).set_text('잘 모르겠네요.\n\n'\
                                          '저는 요즘 볼만한 영화들을 알려드리고, '\
                                          '현재 계신 곳에서 가까운 영화관들의 상영시간표를 알려드려요.\n\n'
                                          "'영화순위'나 '근처 상영관 찾기'를 입력해보세요.")\
                                .add_quick_reply('영화순위')\
                                .add_quick_reply('근처 상영관 찾기')
        self.send_message(message)
#+END_SRC

완성된 코드는 [[https://github.com/toracle/moviefriend][GitHub]] 에서 확인할 수 있습니다.
